#include <check.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#include "s21_decimal.h"

#test test1_from_float_to_decimal

float a = 0.5;
s21_decimal result = {0};
s21_decimal example = {0};

example.bits[0] = 0b00000000010011000100101101000000;
example.bits[1] = 0b00000000000000000000000000000000;
example.bits[2] = 0b00000000000000000000000000000000;
example.bits[3] = 0b00000000000001110000000000000000;

s21_from_float_to_decimal(a, &result);

ck_assert_int_eq(result.bits[0], example.bits[0]);
ck_assert_int_eq(result.bits[1], example.bits[1]);
ck_assert_int_eq(result.bits[2], example.bits[2]);
ck_assert_int_eq(result.bits[3], example.bits[3]);

#test test2_from_float_to_decimal

s21_decimal val;
s21_from_float_to_decimal(0.03F, &val);
ck_assert_int_eq(val.bits[0], 3000000);
ck_assert_int_eq(val.bits[1], 0);
ck_assert_int_eq(val.bits[2], 0);
ck_assert_int_eq(val.bits[3], 524288);

s21_from_float_to_decimal(127.1234F, &val);
ck_assert_int_eq(val.bits[0], 12712340);
ck_assert_int_eq(val.bits[1], 0);
ck_assert_int_eq(val.bits[2], 0);
ck_assert_int_eq(val.bits[3], 327680);

#test test3_from_float_to_decimal

s21_decimal val;
s21_from_float_to_decimal(22.14836E+03F, &val);
ck_assert_int_eq(val.bits[0], 2214836);
ck_assert_int_eq(val.bits[1], 0);
ck_assert_int_eq(val.bits[2], 0);
ck_assert_int_eq(val.bits[3], 131072);

#test test4_from_float_to_decimal

s21_decimal val;
s21_from_float_to_decimal(1.02E+09F, &val);
ck_assert_int_eq(val.bits[0], 855490560);
ck_assert_int_eq(val.bits[1], 15);
ck_assert_int_eq(val.bits[2], 0);
ck_assert_int_eq(val.bits[3], 0);

#test test8_from_float_to_decimal

s21_decimal val;
s21_from_float_to_decimal(0.0F, &val);
ck_assert_int_eq(val.bits[0], 0);
ck_assert_int_eq(val.bits[1], 0);
ck_assert_int_eq(val.bits[2], 0);
ck_assert_int_eq(val.bits[3], 1835008);

#test test9_from_float_to_decimal

s21_decimal val = {0};
s21_decimal example = {0};
s21_from_float_to_decimal(-6.3, &val);

example.bits[0] = 0b00000000011000000010000101100000;
example.bits[1] = 0b00000000000000000000000000000000;
example.bits[2] = 0b00000000000000000000000000000000;
example.bits[3] = 0b10000000000001100000000000000000;

ck_assert_int_eq(val.bits[0], example.bits[0]);
ck_assert_int_eq(val.bits[1], example.bits[1]);
ck_assert_int_eq(val.bits[2], example.bits[2]);
ck_assert_int_eq(val.bits[3], example.bits[3]);

#test test10_from_float_to_decimal

s21_decimal val = {0};
s21_decimal example = {0};
s21_from_float_to_decimal(-234.3789, &val);

example.bits[0] = 0b00000000001000111100001101101101;
example.bits[1] = 0b00000000000000000000000000000000;
example.bits[2] = 0b00000000000000000000000000000000;
example.bits[3] = 0b10000000000001000000000000000000;

ck_assert_int_eq(val.bits[0], example.bits[0]);
ck_assert_int_eq(val.bits[1], example.bits[1]);
ck_assert_int_eq(val.bits[2], example.bits[2]);
ck_assert_int_eq(val.bits[3], example.bits[3]);

#test test11_from_float_to_decimal

s21_decimal val = {0};
s21_decimal example = {0};
// float a = 0.5;
// s21_from_float_to_decimal(a, &val);

example.bits[0] = 0b00000000010011000100101101000000;
example.bits[1] = 0b00000000000000000000000000000000;
example.bits[2] = 0b00000000000000000000000000000000;
example.bits[3] = 0b00000000000001110000000000000000;

val.bits[0] = 0b00000000000000000000000000000101;
val.bits[1] = 0b00000000000000000000000000000000;
val.bits[2] = 0b00000000000000000000000000000000;
val.bits[3] = 0b00000000000000010000000000000000;

ck_assert_int_eq(dec_equal(val, example), 1);

#test test1_from_decimal_to_float

// s21_decimal val = {0};
s21_decimal example = {0};
float ex = -6.3;
float res = 0;
example.bits[0] = 0b00000000011000000010000101100000;
example.bits[1] = 0b00000000000000000000000000000000;
example.bits[2] = 0b00000000000000000000000000000000;
example.bits[3] = 0b10000000000001100000000000000000;

s21_from_decimal_to_float(example, &res);
ck_assert_double_eq(ex, res);

#test test2_from_decimal_to_float

// s21_decimal val = {0};
s21_decimal example = {0};
float ex = 0.5;
float res = 0;
example.bits[0] = 0b00000000010011000100101101000000;
example.bits[1] = 0b00000000000000000000000000000000;
example.bits[2] = 0b00000000000000000000000000000000;
example.bits[3] = 0b00000000000001110000000000000000;

s21_from_decimal_to_float(example, &res);
ck_assert_double_eq(ex, res);

#test test4_from_decimal_to_float

s21_decimal number;
// decimal: -0.8
// float: -0.8
// int: -1085485875
number.bits[0] = 0b00000000000000000000000000001000;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b10000000000000010000000000000000;
int result_int = -1085485875;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test_dop_from_decimal_to_float

s21_decimal number;
// decimal: -0.8
// float: -0.8
// int: -1085485875
number.bits[0] = 0b00000000000000000000000000001000;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b00000000000111100000000000000000;
// int result_int = -1085485875;
// int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(0, my_int);
ck_assert_int_eq(my_error, 1);

#test test5_from_decimal_to_float

s21_decimal number;
// decimal: 1
// float: 1
// int: 1065353216
number.bits[0] = 0b00000000000000000000000000000001;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b00000000000000000000000000000000;
int result_int = 1065353216;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test6_from_decimal_to_float

s21_decimal number;
// decimal: 0.0
// float: 0
// int: -2147483648
number.bits[0] = 0b00000000000000000000000000000000;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b10000000000000010000000000000000;
int result_int = -2147483648;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test7_from_decimal_to_float

s21_decimal number;
// decimal: -1.75
// float: -1.75
// int: -1075838976
number.bits[0] = 0b00000000000000000000000010101111;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b10000000000000100000000000000000;
int result_int = -1075838976;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test8_from_decimal_to_float

s21_decimal number;
// decimal: 6521
// float: 6521
// int: 1170982912
number.bits[0] = 0b00000000000000000001100101111001;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b00000000000000000000000000000000;
int result_int = 1170982912;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test9_from_decimal_to_float

s21_decimal number;
// decimal: 4
// float: 4
// int: 1082130432
number.bits[0] = 0b00000000000000000000000000000100;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b00000000000000000000000000000000;
int result_int = 1082130432;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test10_from_decimal_to_float

s21_decimal number;
// decimal: 65658654
// float: 6.565866E+07
// int: 1283094472
number.bits[0] = 0b00000011111010011101111100011110;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b00000000000000000000000000000000;
int result_int = 1283094472;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test11_from_decimal_to_float

s21_decimal number;
// decimal: -364748
// float: -364748
// int: -927852160
number.bits[0] = 0b00000000000001011001000011001100;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b10000000000000000000000000000000;
int result_int = -927852160;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test12_from_decimal_to_float

s21_decimal number;
// decimal: 0.003
// float: 0.003
// int: 994352038
number.bits[0] = 0b00000000000000000000000000000011;
number.bits[1] = 0b00000000000000000000000000000000;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b00000000000000110000000000000000;
int result_int = 994352038;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test13_from_decimal_to_float

s21_decimal number;
// decimal: -9878798789
// float: -9.878798E+09
// int: -804047712
number.bits[0] = 0b01001100110100101000000111000101;
number.bits[1] = 0b00000000000000000000000000000010;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b10000000000000000000000000000000;
int result_int = -804047712;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test14_from_decimal_to_float

s21_decimal number;
// decimal: 9959999999999999999
// float: 9.96E+18
// int: 1594505479
number.bits[0] = 0b11001010111000111111111111111111;
number.bits[1] = 0b10001010001110010000011100111010;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b00000000000000000000000000000000;
int result_int = 1594505479;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test15_from_decimal_to_float

s21_decimal number;
// decimal: 18446744073709551615
// float: 1.844674E+19
// int: 1602224128
number.bits[0] = 0b11111111111111111111111111111111;
number.bits[1] = 0b11111111111111111111111111111111;
number.bits[2] = 0b00000000000000000000000000000000;
number.bits[3] = 0b00000000000000000000000000000000;
int result_int = 1602224128;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test16_from_decimal_to_float

s21_decimal number;
// decimal: -5454545545352456454545645464
// float: -5.454546E+27
// int: -309526744
number.bits[0] = 0b10001000100000001001111110011000;
number.bits[1] = 0b10000010011101100000001010011001;
number.bits[2] = 0b00010001100111111110010011110010;
number.bits[3] = 0b10000000000000000000000000000000;
int result_int = -309526744;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test17_from_decimal_to_float

s21_decimal number;
// decimal: 79228162514264337593543950335
// float: 7.922816E+28
// int: 1870659584
number.bits[0] = 0b11111111111111111111111111111111;
number.bits[1] = 0b11111111111111111111111111111111;
number.bits[2] = 0b11111111111111111111111111111111;
number.bits[3] = 0b00000000000000000000000000000000;
int result_int = 1870659584;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test18_from_decimal_to_float

s21_decimal number;
// decimal: 1234.5677987654345678987654346
// float: 1234.568
// int: 1150964267
number.bits[0] = 0b10010001000010101111010011001010;
number.bits[1] = 0b11000000010001011101010111110010;
number.bits[2] = 0b00100111111001000001101100000000;
number.bits[3] = 0b00000000000110010000000000000000;
int result_int = 1150964267;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test19_from_decimal_to_float

s21_decimal number;
// decimal: -123458677.98765434567898765435
// float: -1.234587E+08
// int: -856982897
number.bits[0] = 0b10111001000000010001100001111011;
number.bits[1] = 0b01101110100110001001011011101100;
number.bits[2] = 0b00100111111001000100001100110010;
number.bits[3] = 0b10000000000101000000000000000000;
int result_int = -856982897;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test20_from_decimal_to_float

s21_decimal number;
// decimal: -79228162514264337593543950335
// float: -7.922816E+28
// int: -276824064
number.bits[0] = 0b11111111111111111111111111111111;
number.bits[1] = 0b11111111111111111111111111111111;
number.bits[2] = 0b11111111111111111111111111111111;
number.bits[3] = 0b10000000000000000000000000000000;
int result_int = -276824064;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test21_from_decimal_to_float

s21_decimal number;
// decimal: -79228162514264337593543950330
// float: -7.922816E+28
// int: -276824064
number.bits[0] = 0b11111111111111111111111111111010;
number.bits[1] = 0b11111111111111111111111111111111;
number.bits[2] = 0b11111111111111111111111111111111;
number.bits[3] = 0b10000000000000000000000000000000;
int result_int = -276824064;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test22_from_decimal_to_float

s21_decimal number;
// decimal: -79228162514264337593543950330
// float: -7.922816E+28
// int: -276824064
number.bits[0] = 0b11111111111111111111111111111010;
number.bits[1] = 0b11111111111111111111111111111111;
number.bits[2] = 0b11111111111111111111111111111111;
number.bits[3] = 0b10000000000000000000000000000000;
int result_int = -276824064;
int result_error = 0;
float my_float;
int my_error = s21_from_decimal_to_float(number, &my_float);
int my_int = *(int *)(void *)&my_float;
ck_assert_int_eq(result_int, my_int);
ck_assert_int_eq(result_error, my_error);

#test test1_s21_div

s21_decimal src1, src2, result, origin;
// 30064771176
// 3
// 10021590392
src1.bits[0] = 0b00000000000000000000000001101000;
src1.bits[1] = 0b00000000000000000000000000000111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;

src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
origin.bits[0] = 0b01010101010101010101010101111000;
origin.bits[1] = 0b00000000000000000000000000000010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(result.bits[3], origin.bits[3]);
ck_assert_int_eq(result.bits[2], origin.bits[2]);
ck_assert_int_eq(result.bits[1], origin.bits[1]);
ck_assert_int_eq(result.bits[0], origin.bits[0]);

#test test2_s21_div

s21_decimal src1, src2, result;
int a = 32768;
int b = -2;
int res_our_dec = 0;
s21_from_int_to_decimal_denis(a, &src1);
s21_from_int_to_decimal_denis(b, &src2);
int res_origin = -16384;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
s21_from_decimal_to_int_denis(result, &res_our_dec);
ck_assert_int_eq(res_our_dec, res_origin);
ck_assert_int_eq(check, check_origin);

#test test3_s21_div

s21_decimal src1, src2, result;
int a = 32768;
int b = 2;
int res_our_dec = 0;
s21_from_int_to_decimal_denis(a, &src1);
s21_from_int_to_decimal_denis(b, &src2);
int res_origin = 16384;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
s21_from_decimal_to_int_denis(result, &res_our_dec);
ck_assert_int_eq(res_our_dec, res_origin);
ck_assert_int_eq(check, check_origin);

#test test4_s21_div

s21_decimal src1, src2, result, origin;
// -30064771176
// 2
// 10021590392
src1.bits[0] = 0b00000000000000000000000001101000;
src1.bits[1] = 0b00000000000000000000000000000111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
origin.bits[0] = 0b10000000000000000000000000110100;
origin.bits[1] = 0b00000000000000000000000000000011;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(result.bits[3], origin.bits[3]);
ck_assert_int_eq(result.bits[2], origin.bits[2]);
ck_assert_int_eq(result.bits[1], origin.bits[1]);
ck_assert_int_eq(result.bits[0], origin.bits[0]);

#test test5_s21_div

s21_decimal src1, src2, result, origin;
// 0
// 0.015
// 0
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000001111;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000110000000000000000;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
int equal = 1;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(s21_is_equal_sasha(result, origin), equal);

#test test6_s21_div

s21_decimal src1, src2, result, origin;

origin.bits[0] = 0b00000000000000000000000000001010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
src1.bits[0] = 0b00000000000000000000000001100101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000001100101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int check = s21_div(src1, src2, &result);
int check_origin = 0;

int equal = 1;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(s21_is_equal_sasha(result, origin), equal);

#test test8_s21_div

s21_decimal src1, src2, result;
float a = -115.2;
float b = 0.0;
s21_from_float_to_decimal(a, &src1);
s21_from_float_to_decimal(b, &src2);
int check = s21_div(src1, src2, &result);
int check_origin = 3;

ck_assert_int_eq(check_origin, check);

#test test9_s21_div
s21_decimal src1, src2, result;
src1.bits[0] = 0x0006BFD0;
src1.bits[1] = 0x00000000;
src1.bits[2] = 0x00000000;
src1.bits[3] = 0x00000000;

src2.bits[0] = 0x00000028;
src2.bits[1] = 0x00000000;
src2.bits[2] = 0x00000000;
src2.bits[3] = 0x00000000;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 0x00000000);
ck_assert_int_eq(result.bits[2], 0x00000000);
ck_assert_int_eq(result.bits[1], 0x00000000);
ck_assert_int_eq(result.bits[0], 0x00002B32);

#test test10_s21_div

s21_decimal src1, src2, result, origin;
src1.bits[0] = 0xDB8FCE66;
src1.bits[1] = 0x00000405;
src1.bits[2] = 0x00000000;
src1.bits[3] = 0x00070000;

src2.bits[0] = 0x00009C5C;
src2.bits[1] = 0x00000000;
src2.bits[2] = 0x00000000;
src2.bits[3] = 0x00030000;

origin.bits[0] = 0b10100000000111101101101010111010;
origin.bits[1] = 0b10110001011111101011000101100100;
origin.bits[2] = 0x23B4933A;
origin.bits[3] = 0x00180000;

int equal = 1;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(s21_is_equal_sasha(result, origin), equal);

#test test_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 10;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000001010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;

  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;

  value_type_result = s21_add(src1, src2, &result);
  value_type_origin =0;
  origin.bits[0] = 0b00000000000000000000000000001101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;

  int equal = 1;


  ck_assert_int_eq(s21_is_equal(result, origin), equal);
  ck_assert_int_eq(value_type_result, value_type_origin);  


#test test2_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 3;
  // src2 = 2;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test3_s21_add

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);

#test test4_s21_add

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test5_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 0.0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000010000000000000000;

  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000011110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;

  int equal = 1;

  ck_assert_int_eq(s21_is_equal(origin, result), equal);
  ck_assert_int_eq(value_type_result, value_type_origin);

#test test6_s21_add  

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);

#test test7_s21_add

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 6521;
  // src2 = 74121;
  src1.bits[0] = 0b00000000000000000001100101111001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000010010000110001001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000010011101100000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);

#test test8_s21_add

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 4;
  // src2 = 97623323;
  src1.bits[0] = 0b00000000000000000000000000000100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000101110100011001110100011011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000101110100011001110100011111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test9_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 65658654;
  // src2 = 5;
  src1.bits[0] = 0b00000011111010011101111100011110;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000011111010011101111100100011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test10_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = -364748;
  // src2 = 1;
  src1.bits[0] = 0b00000000000001011001000011001100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000001011001000011001011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;

  int equal = 1;
  ck_assert_int_eq(s21_is_equal(origin, result), equal);
  ck_assert_int_eq(value_type_result, value_type_origin);

#test test11_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 1;
  // src2 = 98745654321;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11111101101100110001110000110001;
  src2.bits[1] = 0b00000000000000000000000000010110;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b11111101101100110001110000110010;
  origin.bits[1] = 0b00000000000000000000000000010110;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test12_s21_add  

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = -9878798789;
  // src2 = -3;
  src1.bits[0] = 0b01001100110100101000000111000101;
  src1.bits[1] = 0b00000000000000000000000000000010;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b01001100110100101000000111001000;
  origin.bits[1] = 0b00000000000000000000000000000010;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int equal = 1;
  ck_assert_int_eq(s21_is_equal(origin, result), equal);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test13_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 9999999999999999999;
  // src2 = 1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b10001001111010000000000000000000;
  origin.bits[1] = 0b10001010110001110010001100000100;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);

  #test test14_s21_add

s21_decimal max, src2, result;
int value_type_result, value_type_origin;
// src1 = +infinity;
// src2 = 0;
    max.bits[0] = 0b11111111111111111111111111111111;
    max.bits[1] = 0b11111111111111111111111111111111;
    max.bits[2] = 0b11111111111111111111111111111111;
    max.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(max, src2, &result);
value_type_origin = 0;
ck_assert_int_eq(value_type_result, value_type_origin);


#test test15_s21_add

s21_decimal max, result;
int value_type_result, value_type_origin;
// src1 = too big;
// src2 = 0;
    max.bits[0] = 0b11111111111111111111111111111111;
    max.bits[1] = 0b11111111111111111111111111111111;
    max.bits[2] = 0b11111111111111111111111111111111;
    max.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(max, max, &result);
value_type_origin = 1;
ck_assert_int_eq(value_type_result, value_type_origin);


#test test16_s21_add

s21_decimal max, src2, result;
int value_type_result, value_type_origin;
// src1 = -infinity;
// src2 = 0;
    max.bits[0] = 0b11111111111111111111111111111111;
    max.bits[1] = 0b11111111111111111111111111111111;
    max.bits[2] = 0b11111111111111111111111111111111;
    max.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(max, src2, &result);
value_type_origin = 0;
ck_assert_int_eq(value_type_result, value_type_origin);

#test test17_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 10;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000001010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;

  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;

  value_type_result = s21_add(src1, src2, &result);
  value_type_origin =0;
  origin.bits[0] = 0b00000000000000000000000000001101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);      


#test test18_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 3;
  // src2 = 2;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);

#test test19_s21_add

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);



#test test20_s21_add

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);

#test test21_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 0.0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000010000000000000000;

  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000011110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;

  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test22_s21_add  

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);

#test test23_s21_add

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 6521;
  // src2 = 74121;
  src1.bits[0] = 0b00000000000000000001100101111001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000010010000110001001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000000010011101100000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test24_s21_add

 s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 4;
  // src2 = 97623323;
  src1.bits[0] = 0b00000000000000000000000000000100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000101110100011001110100011011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000101110100011001110100011111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test25_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 65658654;
  // src2 = 5;
  src1.bits[0] = 0b00000011111010011101111100011110;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000011111010011101111100100011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test26_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = -364748;
  // src2 = 1;
  src1.bits[0] = 0b00000000000001011001000011001100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b00000000000001011001000011001011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test27_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 1;
  // src2 = 98745654321;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11111101101100110001110000110001;
  src2.bits[1] = 0b00000000000000000000000000010110;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b11111101101100110001110000110010;
  origin.bits[1] = 0b00000000000000000000000000010110;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test28_s21_add  

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = -9878798789;
  // src2 = -3;
  src1.bits[0] = 0b01001100110100101000000111000101;
  src1.bits[1] = 0b00000000000000000000000000000010;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b01001100110100101000000111001000;
  origin.bits[1] = 0b00000000000000000000000000000010;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test29_s21_add

s21_decimal src1, src2, origin, result;
  int value_type_result, value_type_origin;
  // src1 = 9999999999999999999;
  // src2 = 1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  value_type_result = s21_add(src1, src2, &result);
  value_type_origin = 0;
  origin.bits[0] = 0b10001001111010000000000000000000;
  origin.bits[1] = 0b10001010110001110010001100000100;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(value_type_result, value_type_origin);


#test test1_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 5;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test2_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 3;
// src2 = 6;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test3_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 8;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000001000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test4_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 7;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);


#test test5_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.0;
// src2 = 5;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000000000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000110010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000010000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);


#test test6_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 3;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test7_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 787891;
// src2 = 238471;
src1.bits[0] = 0b00000000000011000000010110110011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000111010001110000111;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000010000110001000101100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);


#test test8_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 9;
// src2 = 18571145;
src1.bits[0] = 0b00000000000000000000000000001001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000001000110110101111110001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001000110110101111110000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test9_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1849687;
// src2 = 6;
src1.bits[0] = 0b00000000000111000011100101010111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000111000011100101010001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test10_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -3187878;
// src2 = 1;
src1.bits[0] = 0b00000000001100001010010010100110;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000001100001010010010100111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);


#test test11_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 18768768;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000001000111100110001110000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001000111100110001101111111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test12_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -2168564564;
// src2 = -9;
src1.bits[0] = 0b10000001010000011010101101010100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10000001010000011010101101001011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test13_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10001001111001111111111111111110;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test14_s21_sub
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test15_s21_sub

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -54896651557845.352654545456455;
// src2 = 21465;
src1.bits[0] = 0b01110001100100011000110101000111;
src1.bits[1] = 0b00001111010011100000001101011111;
src1.bits[2] = 0b10110001011000010111001000100100;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b00000000000000000101001111011001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01111001010101000000110101000111;
origin.bits[1] = 0b00111001001100010000001100100101;
origin.bits[2] = 0b10110001011000010111001000100101;
origin.bits[3] = 0b10000000000011110000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);


#test test16_s21_sub

s21_decimal max, src2, result;
int value_type_result, value_type_origin;
// src1 = +infinity;
// src2 = 0;
    max.bits[0] = 0b11111111111111111111111111111111;
    max.bits[1] = 0b11111111111111111111111111111111;
    max.bits[2] = 0b11111111111111111111111111111111;
    max.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(max, src2, &result);
value_type_origin = 0;
ck_assert_int_eq(value_type_result, value_type_origin);


#test test17_s21_sub

s21_decimal max, min, result;
int value_type_result, value_type_origin;
// src1 = +infinity;
// src2 = 0;
    max.bits[0] = 0b11111111111111111111111111111111;
    max.bits[1] = 0b11111111111111111111111111111111;
    max.bits[2] = 0b11111111111111111111111111111111;
    max.bits[3] = 0b00000000000000000000000000000000;
    min.bits[0] = 0b11111111111111111111111111111111;
    min.bits[1] = 0b11111111111111111111111111111111;
    min.bits[2] = 0b11111111111111111111111111111111;
    min.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_sub(max, min, &result);
value_type_origin = 1;
ck_assert_int_eq(value_type_result, value_type_origin);


#test test18_s21_sub

s21_decimal max, src2, result;
int value_type_result, value_type_origin;
// src1 = +infinity;
// src2 = 0;
    max.bits[0] = 0b11111111111111111111111111111111;
    max.bits[1] = 0b11111111111111111111111111111111;
    max.bits[2] = 0b11111111111111111111111111111111;
    max.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(max, src2, &result);
value_type_origin = 0;
ck_assert_int_eq(value_type_result, value_type_origin);


#test test19_s21_sub

s21_decimal max, min, result;
int value_type_result, value_type_origin;
// src1 = +infinity;
// src2 = 0;
    max.bits[0] = 0b11111111111111111111111111111111;
    max.bits[1] = 0b11111111111111111111111111111111;
    max.bits[2] = 0b11111111111111111111111111111111;
    max.bits[3] = 0b00000000000000000000000000000000;
    min.bits[0] = 0b11111111111111111111111111111111;
    min.bits[1] = 0b11111111111111111111111111111111;
    min.bits[2] = 0b11111111111111111111111111111111;
    min.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_sub(min, max, &result);
value_type_origin = 2;
ck_assert_int_eq(value_type_result, value_type_origin);

#test test1_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test2_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 3;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test3_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test4_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test5_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.0;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000010000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test6_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test7_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 6521;
// src2 = 74121;
src1.bits[0] = 0b00000000000000000001100101111001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000010010000110001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00011100110011110011101011000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test8_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 4;
// src2 = 97623323;
src1.bits[0] = 0b00000000000000000000000000000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000101110100011001110100011011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00010111010001100111010001101100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test9_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 65658654;
// src2 = 5;
src1.bits[0] = 0b00000011111010011101111100011110;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00010011100100010101101110010110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test10_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000001011001000011001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test11_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 98745654321;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111101101100110001110000110001;
src2.bits[1] = 0b00000000000000000000000000010110;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111101101100110001110000110001;
origin.bits[1] = 0b00000000000000000000000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test12_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -9878798789;
// src2 = -3;
src1.bits[0] = 0b01001100110100101000000111000101;
src1.bits[1] = 0b00000000000000000000000000000010;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11100110011101111000010101001111;
origin.bits[1] = 0b00000000000000000000000000000110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test13_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10001001111001111111111111111111;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test14_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test15_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11000110011101000101101010011110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00111001100010111010010101100001;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test16_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -545454512454545.35265454545645; похоже, что все числа переведены правильно, проверила на калькуляторе
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01110001110011111110010111001111;
origin.bits[1] = 0b01000100010011101101011110011001;
origin.bits[2] = 0b01011110010101101001110000011100;
origin.bits[3] = 0b00000000000011010000000000000000;

int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test17_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 7961327845421.879754123131254;
// src2 = 0;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test18_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 12345677.987654345678987654346; переведено правильно
// src2 = 87654323456.9876545678987653; переведено правильно, ответ тоже посчитан и переведен правильно
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b00000000000010100000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test19_s21_mul
// -1082152051625666456.1283338478

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
int equal = 1;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b10000000000010100000000000000000;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test20_s21_mul

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b00000000000010100000000000000000;
int equal = 1;
ck_assert_int_eq(s21_is_equal(result, origin), equal);
ck_assert_int_eq(value_type_result, value_type_origin);

#test test1_is_equal

s21_decimal first = {{4412, 5675, 1254, 0b00000100000000000010000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b00000100000000000010000000000000}};
ck_assert_int_eq(s21_is_equal(first, second), 1);

#test test2_is_equal_fraction

s21_decimal first = {{4412, 5675, 1254, 0b10110010000000001110000111000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11001001000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 1);

#test test3_is_equal_sign

s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b01110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test test4_is_equal_sign

s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b01110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test test5_is_equal

s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 12541, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test test6_is_equal

s21_decimal first = {{412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test test7_is_equal

s21_decimal first = {
    {1564, 31452, 6109410, 0b11110100000000000010000111111110}};
s21_decimal second = {
    {1564, 31452, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test test8_is_equal

s21_decimal first = {{1564, 31452, 610941, 0b11110100000000000010000111111110}};
s21_decimal second = {{1564, 3142, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test test9_is_equal

s21_decimal first = {
    {15614, 31452, 610941, 0b11110100000000000010000111111110}};
s21_decimal second = {
    {1564, 31452, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test test10_is_equal

s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test test11_is_equal

s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test test12_is_equal

s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test test13_is_equal

s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test test14_is_equal

s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test test15_is_equal

s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test test_find_sign

int a = 0b00000000000000000000000000000000;
int b = 0b10000000000000000000000000000000;
ck_assert_int_eq(find_sign(a), 0);
ck_assert_int_eq(find_sign(b), 1);

#test test_find_scale

int a = 0b00000000000000000000000000000000;
int b = 0b00000000000000110000000000000000;
int c = 0b00000000000010100000000000000000;
int d = 0b00000000000111000000000000000000;
int a1 = 0;
int b1 = 3;
int c1 = 10;
int d1 = 28;
ck_assert_int_eq(find_scale(a), a1);
ck_assert_int_eq(find_scale(b), b1);
ck_assert_int_eq(find_scale(c), c1);
ck_assert_int_eq(find_scale(d), d1);

#test test_s21_from_int_to_decimal_1

int a1 = 0;
int a2 = -3;
int a3 = 2147483647;
s21_decimal dst = {0};
s21_decimal answer1;
    answer1.bits[0] = 0b00000000000000000000000000000000;
    answer1.bits[1] = 0b00000000000000000000000000000000;
    answer1.bits[2] = 0b00000000000000000000000000000000;
    answer1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal answer2;
    answer2.bits[0] = 0b00000000000000000000000000000011;
    answer2.bits[1] = 0b00000000000000000000000000000000;
    answer2.bits[2] = 0b00000000000000000000000000000000;
    answer2.bits[3] = 0b10000000000000000000000000000000;
s21_decimal answer3;
    answer3.bits[0] = 0b01111111111111111111111111111111;
    answer3.bits[1] = 0b00000000000000000000000000000000;
    answer3.bits[2] = 0b00000000000000000000000000000000;
    answer3.bits[3] = 0b00000000000000000000000000000000;
s21_decimal answer4;
    answer4.bits[0] = 0b00000000000000000000000000000011;
    answer4.bits[1] = 0b00000000000000000000000000000000;
    answer4.bits[2] = 0b00000000000000000000000000000000;
    answer4.bits[3] = 0b00000000000000000000000000000000;    
s21_from_int_to_decimal(a1, &dst);
ck_assert_int_eq(s21_is_equal(dst, answer1), 1);
s21_from_int_to_decimal(a2, &dst);
ck_assert_int_eq(s21_is_equal(dst, answer2), 1);
s21_from_int_to_decimal(a3, &dst);
ck_assert_int_eq(s21_is_equal(dst, answer3), 1);
s21_from_int_to_decimal(a2, &dst);
ck_assert_int_eq(s21_is_equal(dst, answer4), 0);

#test test_from_big_to_decimal_1
// -79,228,162,514,264,337,593,543,950,335 -> -79,228,162,514,264,337,593,543,950,335

s21_big_decimal value;
    value.bits[0] = 0b11111111111111111111111111111111;
    value.bits[1] = 0b11111111111111111111111111111111;
    value.bits[2] = 0b11111111111111111111111111111111;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b11111111111111111111111111111111;
    answer.bits[1] = 0b11111111111111111111111111111111;
    answer.bits[2] = 0b11111111111111111111111111111111;
    answer.bits[3] = 0b10000000000000000000000000000000;
from_big_to_decimal(value, &result);
//print_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_from_big_to_decimal_2
// 0.5 -> 0.5

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000101;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000101;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000010000000000000000;
from_big_to_decimal(value, &result);
//print_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_from_big_to_decimal_3
//3402823669209384634.63374607431768211455
//3402823669209384634.6337460743

s21_big_decimal value;
    value.bits[0] = 0b11111111111111111111111111111111;
    value.bits[1] = 0b11111111111111111111111111111111;
    value.bits[2] = 0b11111111111111111111111111111111;
    value.bits[3] = 0b11111111111111111111111111111111;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000101000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b01011010101110011010001000000111;
    answer.bits[1] = 0b01011110111101101110101011011111;
    answer.bits[2] = 0b01101101111100110111111101100111;
    answer.bits[3] = 0b10000000000010100000000000000000;
from_big_to_decimal(value, &result);
//print_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_from_big_to_decimal_4
// -6690226962382856151845350.1554058276947623935 
// -6690226962382856151845350.1155                   

s21_big_decimal value;
    value.bits[0] = 0b11111111111111111111111111111111;
    value.bits[1] = 0b11111111111111111111111111111111;
    value.bits[2] = 0b11111111111111111111111111111111;
    value.bits[3] = 0b11111111111111111111111111111111;
    value.bits[4] = 0b00000000000111100000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000101000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000110011101101010110011100011;
    answer.bits[1] = 0b10000100101011101111100101101000;
    answer.bits[2] = 0b11011000001011000100001010100111;
    answer.bits[3] = 0b10000000000001000000000000000000;
from_big_to_decimal(value, &result);
//print_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_left_shift_part

int result;
int pos0 = 0;
for (int i = 0; i < 1007483647; i += 7197517) {
    result = left_shift_part(i, &pos0);
    ck_assert_int_eq(result, i * 2);
}

#test test_right_shift_part_1

int result;
int pos31 = 0;
result = right_shift_part(100, &pos31);
ck_assert_int_eq(result, 50);

#test test_right_shift_part_2

int result;
int pos31 = 0;
int i = 0b01111111111111111111111111111111;
int answer = 0b00111111111111111111111111111111;
result = right_shift_part(i, &pos31);
ck_assert_int_eq(result, answer);

#test test_right_shift_part_3

int result;
int pos31;
for (int i = 25; i < 107483647; i += 6534281) {
    pos31 = 0;
    result = right_shift_part(i, &pos31);
    ck_assert_int_eq(result, i / 2);
}

#test test_left_shift_bits_10_1

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000010111;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000011100110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
int step = 10;
left_shift_bits_10(value, &result, step);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_10_2

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000000;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000001000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000001000000000000000000;
int step = 10;
left_shift_bits_10(value, &result, step);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_10_3

s21_big_decimal value;
    value.bits[0] = 0b00101110100010110110001110110101;
    value.bits[1] = 0b01111110101000011111000001010100;
    value.bits[2] = 0b00000000000000000000000111101110;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b11010001011100011110010100010010;
    answer.bits[1] = 0b11110010010100110110001101001001;
    answer.bits[2] = 0b00000000000000000001001101010000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
int step = 10;
left_shift_bits_10(value, &result, step);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_10_4

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000011;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000011110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
int step = 10;
left_shift_bits_10(value, &result, step);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_10_5

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000011110;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000011110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
int step = 1;
left_shift_bits_10(value, &result, step);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_10_6

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000011110;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000100101100;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
int step = 10;
left_shift_bits_10(value, &result, step);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_10_7

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000011;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000100101100;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
int step = 100;
left_shift_bits_10(value, &result, step);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_10_8

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000011;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
int step = 2;
left_shift_bits_10(value, &result, step);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_10_1
//230 / 10 = 23
s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000011100110;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000010111;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
right_shift_bits_10(value, &result);
//print_big_decimal(result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_10_2

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000000;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000001000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000001000000000000000000;
right_shift_bits_10(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_10_3

s21_big_decimal value;
    value.bits[0] = 0b11010001011100011110010100010010;
    value.bits[1] = 0b11110010010100110110001101001001;
    value.bits[2] = 0b00000000000000000001001101010000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00101110100010110110001110110101;
    answer.bits[1] = 0b01111110101000011111000001010100;
    answer.bits[2] = 0b00000000000000000000000111101110;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
right_shift_bits_10(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_10_4

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000011110;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000011;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
right_shift_bits_10(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_10_5

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000011110;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000011110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000010000000000000000;
right_shift_bits_10(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_10_6
//300 -> 30

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000100101100;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000011110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
right_shift_bits_10(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_10_7
//300 -> 3

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000100101100;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000011;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000100000000000000000;
right_shift_bits_10(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 0);


#test test_left_shift_bits_1

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000010111;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000101110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
left_shift_bits(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_2

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000010111;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000101110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
left_shift_bits(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_left_shift_bits_3

s21_big_decimal value;
    value.bits[0] = 0b11010001011100011110010100010010;
    value.bits[1] = 0b11110010010100110110001101001001;
    value.bits[2] = 0b00000000000000000001001101010000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000001100000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b10100010111000111100101000100100;
    answer.bits[1] = 0b11100100101001101100011010010011;
    answer.bits[2] = 0b00000000000000000010011010100001;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000001100000000000000000;
left_shift_bits(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_1
// 12 6
s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000001100;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
right_shift_bits(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_2

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000001100;
    value.bits[1] = 0b00000000000000000000000000001100;
    value.bits[2] = 0b00000000000000000000000000001100;
    value.bits[3] = 0b00000000000000000000000000001100;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000110;
    answer.bits[1] = 0b00000000000000000000000000000110;
    answer.bits[2] = 0b00000000000000000000000000000110;
    answer.bits[3] = 0b00000000000000000000000000000110;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
right_shift_bits(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_3

s21_big_decimal value;
    value.bits[0] = 0b10000000000000000000000000000000;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b01000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
right_shift_bits(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_4

s21_big_decimal value;
    value.bits[0] = 0b10100000000000000000000000000000;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b10100000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b01010000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b01010000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
right_shift_bits(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_right_shift_bits_5

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000000;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
right_shift_bits(value, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);


#test test_sub_part_1

int result;
int flag = 0;
int a = 0, b = 0;
result = sub_part(a, b, &flag);
ck_assert_int_eq(result, a - b);

#test test_sub_part_2

int result;
int flag = 0;
int a = 10, b = 0;
result = sub_part(a, b, &flag);
ck_assert_int_eq(result, a - b);

#test test_sub_part_3

int result;
int flag = 0;
int a = 10, b = 6;
result = sub_part(a, b, &flag);
ck_assert_int_eq(result, a - b);

#test test_sub_part_4

int result;
int flag = 0;
int a = 455, b = 221;
result = sub_part(a, b, &flag);
ck_assert_int_eq(result, a - b);

#test test_add_part_1

int result;
int flag = 0;
for (int a = 0, b = 0; (a < 6820667) && (b < 4296220); a += 39729, b += 20775) {
    result = add_part(a, b, &flag);
    ck_assert_int_eq(result, a + b);
}

#test test_add_part_2

int result;
int flag = 0;
int a = 0b11111111111111111111111111111111;
int b = 1;
result = add_part(a, b, &flag);
ck_assert_int_eq(result, 0);
ck_assert_int_eq(flag, 1);

#test test_add_big_1

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000000;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000000;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
add_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_add_big_2

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000010;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000001;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000011;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000010000000000000000;
add_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_add_big_3

s21_big_decimal value_1;
    value_1.bits[0] = 0b11010001011100011110010100010010;
    value_1.bits[1] = 0b11110010010100110110001101001001;
    value_1.bits[2] = 0b00000000000000000001001101010000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b10000101101011001000011000011101;
    value_2.bits[1] = 0b00010110001101000001110101111101;
    value_2.bits[2] = 0b00000000000000000000000000000100;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b01010111000111100110101100101111;
    answer.bits[1] = 0b00001000100001111000000011000111;
    answer.bits[2] = 0b00000000000000000001001101010101;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000010000000000000000;
add_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_add_big_4

s21_big_decimal value_1;
    value_1.bits[0] = 0b11111111111111111111111010110000;
    value_1.bits[1] = 0b11111111111111111111111111111111;
    value_1.bits[2] = 0b11111111111111111111111111111111;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000101001111;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b11111111111111111111111111111111;
    answer.bits[1] = 0b11111111111111111111111111111111;
    answer.bits[2] = 0b11111111111111111111111111111111;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000010000000000000000;
add_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_sub_big_1

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000000;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000000;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
sub_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_sub_big_2

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000100;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000011;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000010000000000000000;
sub_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_sub_big_3
//91218164109768966399250 - 75386912487412368925 = 91142777197281554030325
s21_big_decimal value_1;
    value_1.bits[0] = 0b11010001011100011110010100010010;
    value_1.bits[1] = 0b11110010010100110110001101001001;
    value_1.bits[2] = 0b00000000000000000001001101010000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b10000101101011001000011000011101;
    value_2.bits[1] = 0b00010110001101000001110101111101;
    value_2.bits[2] = 0b00000000000000000000000000000100;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b01001011110001010101111011110101;
    answer.bits[1] = 0b11011100000111110100010111001100;
    answer.bits[2] = 0b00000000000000000001001101001100;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000010000000000000000;
sub_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_sub_big_4

s21_big_decimal value_1;
    value_1.bits[0] = 0b11111111111111111111111111111111;
    value_1.bits[1] = 0b11111111111111111111111111111111;
    value_1.bits[2] = 0b11111111111111111111111111111111;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000101001111;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b11111111111111111111111010110000;
    answer.bits[1] = 0b11111111111111111111111111111111;
    answer.bits[2] = 0b11111111111111111111111111111111;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000010000000000000000;
sub_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mul_big_1
//-0 * -5 = 0

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000000;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
mul_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mul_big_2
//-3 * -5 = 15

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000001111;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
mul_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mul_big_3

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000000;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000000;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
mul_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mul_big_4

s21_big_decimal value_1;

    value_1.bits[0] = 0b00101000111101011100001011100111;
    value_1.bits[1] = 0b11110101110000101000111101011100;
    value_1.bits[2] = 0b00000010100011110101110000101000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000001010011;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b01000111101011100011000011100101;
    answer.bits[1] = 0b10101110000101000111101011100001;
    answer.bits[2] = 0b11010100011110101110000101000111;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
mul_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mul_big_5

s21_big_decimal value_2;
    value_2.bits[0] = 0b00101000111101011100001011100111;
    value_2.bits[1] = 0b11110101110000101000111101011100;
    value_2.bits[2] = 0b00000010100011110101110000101000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000100000000000000000;
s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000001010011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000100000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b01000111101011100011000011100101;
    answer.bits[1] = 0b10101110000101000111101011100001;
    answer.bits[2] = 0b11010100011110101110000101000111;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000001000000000000000000;
mul_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mul_big_6
//147.329 * 50091.9773 = 7380000.9236317

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000100011111110000001;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000110000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00011101110110110110110111011101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000001000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer; 
    answer.bits[0] = 0b11100111010101011011111101011101;
    answer.bits[1] = 0b00000000000000000100001100011110;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000001110000000000000000;
mul_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mul_big_7
//147.329 * -50091.9773 = -7380000.9236317

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000100011111110000001;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000110000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00011101110110110110110111011101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b10000000000001000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer; 
    answer.bits[0] = 0b11100111010101011011111101011101;
    answer.bits[1] = 0b00000000000000000100001100011110;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000001110000000000000000;
mul_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_normalise_big_1

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000000;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
int gap = 0; 
normalise_big(value, &result, gap);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_normalise_big_2

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000011;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000011110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000010000000000000000;
int gap = 1; 
normalise_big(value, &result, gap);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_normalise_big_3

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000011;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000100101100;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000100000000000000000;
int gap = 2; 
normalise_big(value, &result, gap);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_normalise_big_4

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000011;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000101110111000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000110000000000000000;
int gap = 3; 
normalise_big(value, &result, gap);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_normalise_big_5

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000010;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000010;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
int gap = 0; 
normalise_big(value, &result, gap);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_normalise_big_6

s21_big_decimal value;
    value.bits[0] = 0b00000000000000000000000000000011;
    value.bits[1] = 0b00000000000000000000000000000000;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000111010100110000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000001000000000000000000;
int gap = 4; 
normalise_big(value, &result, gap);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_s21_mod_1
//230 mod 13 = 9

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000011100110;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000001101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000001001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_mod(value_1, value_2, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_mod_2
//755979 mod 1000 = 979

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000010111000100100001011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000001111101000;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000001111010011;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_mod(value_1, value_2, &result);
//print_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_mod_3
//7559.79 mod -1000 = 559.79

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000010111000100100001011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000001111101000;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b10000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000001101101010101011;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000100000000000000000;
s21_mod(value_1, value_2, &result);
//print_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_mod_4
//-230 mod 13 = 9

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000011100110;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000001101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000001001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_mod(value_1, value_2, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_mod_5
//-13 mod 230 = -13

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000001101;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000011100110;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000001101;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_mod(value_1, value_2, &result);
//print_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_mod_6
//-1.1 mod 1 = -0.1

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000001011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000010000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000001;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000010000000000000000;
s21_mod(value_1, value_2, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_mod_7
//-1237940039285380274899124223 mod 0.1 = -0 

s21_decimal value_1;
    value_1.bits[0] = 0b11111111111111111111111111111111;
    value_1.bits[1] = 0b11111111111111111111111111111111;
    value_1.bits[2] = 0b00000011111111111111111111111111;
    value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000001;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000010000000000000000;
s21_mod(value_1, value_2, &result);
//print_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_mod_8
//0 mod 13 = 0

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000000;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000001101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_mod(value_1, value_2, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_mod_9
//13 mod 0 

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000001101;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000000;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_mod(value_1, value_2, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 0);

#test test_mod_big_1
//230 mod 13 = 9

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000011100110;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000001101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000001001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
mod_big(value_1, value_2, &result);
//print_big_decimal(result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mod_big_2
//755979 mod 1000 = 979

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000010111000100100001011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000001111101000;
   value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000001111010011;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
mod_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mod_big_3
//7559.79 mod 1000 = 559.79

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000010111000100100001011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000100000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000001111101000;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000001101101010101011;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000100000000000000000;
mod_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mod_big_4
//-77.3 mod 10 = -7.3

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000001100000101;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b10000000000000010000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000001010;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000001001001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000010000000000000000;
mod_big(value_1, value_2, &result);
//print_big_decimal(result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mod_big_6
//10 mod -77.3 = 10

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000001010;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000001100000101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000001010;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
mod_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mod_big_7
//-10 mod -77.3 = -10

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000001010;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000001100000101;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000001010;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b10000000000000000000000000000000;
mod_big(value_1, value_2, &result);
//print_big_decimal(result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_mod_big_8
//-10 mod -10 = 0

s21_big_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000001010;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
    value_1.bits[4] = 0b00000000000000000000000000000000;
    value_1.bits[5] = 0b00000000000000000000000000000000;
    value_1.bits[6] = 0b00000000000000000000000000000000;
    value_1.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000001010;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000000000000000000000000;
    value_2.bits[4] = 0b00000000000000000000000000000000;
    value_2.bits[5] = 0b00000000000000000000000000000000;
    value_2.bits[6] = 0b00000000000000000000000000000000;
    value_2.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000000;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
mod_big(value_1, value_2, &result);
ck_assert_int_eq(is_big_equal(result, answer), 1);

#test test_s21_floor_1
// 6.5 -> 6

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000001000001;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_floor(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_floor_2
// -1.27 -> -2

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000001111111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000100000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000010;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_floor(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_1
// 1.27 -> 1

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000001111111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_2
// 1.67 -> 2

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000010100111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000010;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_3
// 77.3 -> 77

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000001100000101;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000001001101;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_4
// 77.5 -> 78

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000001100000111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000001001110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_5
// 76.5 -> 76

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000001011111101;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000001001100;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_6
// 5.5 -> 6

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000110111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_7
// 6.5 -> 6

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000001000001;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_8
// -1.27 -> -1

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000001111111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000100000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_9
// -1.67 -> -2

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000010100111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000100000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000010;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_10
// -77.3 -> -77

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000001100000101;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000001001101;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_round(value_1, &result);
//print_big_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_11
// -77.5 -> -78

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000001100000111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000001001110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_12
// -76.5 -> -76

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000001011111101;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000001001100;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_round(value_1, &result);
//print_big_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_13
// -5.5 -> -6

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000110111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_round(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_round_14
// -6.5 -> -6

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000001000001;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000010000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000110;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_round(value_1, &result);
//print_big_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_truncate_1
// 1.27 -> 1

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000001111111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000001;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_truncate(value_1, &result);
//print_big_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_truncate_2
// -755.979 -> -755

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000010111000100100001011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000110000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000001011110011;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_truncate(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_truncate_3
// max & 28 scale

s21_decimal value_1;
    value_1.bits[0] = 0b11111111111111111111111111111111;
    value_1.bits[1] = 0b11111111111111111111111111111111;
    value_1.bits[2] = 0b11111111111111111111111111111111;
    value_1.bits[3] = 0b00000000000111000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000111;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_truncate(value_1, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_truncate_4
// max -79,228,162,514,264,337,593,543,950,335 & 28 scale = -7

s21_decimal value_1;
    value_1.bits[0] = 0b11111111111111111111111111111111;
    value_1.bits[1] = 0b11111111111111111111111111111111;
    value_1.bits[2] = 0b11111111111111111111111111111111;
    value_1.bits[3] = 0b10000000000111000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b00000000000000000000000000000111;
    answer.bits[1] = 0b00000000000000000000000000000000;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_truncate(value_1, &result);
//print_big_decimal(result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_negate_1
// 79,228,162,514,264,337,593,543,950,335 -> -79,228,162,514,264,337,593,543,950,335

s21_decimal value;
    value.bits[0] = 0b11111111111111111111111111111111;
    value.bits[1] = 0b11111111111111111111111111111111;
    value.bits[2] = 0b11111111111111111111111111111111;
    value.bits[3] = 0b00000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b11111111111111111111111111111111;
    answer.bits[1] = 0b11111111111111111111111111111111;
    answer.bits[2] = 0b11111111111111111111111111111111;
    answer.bits[3] = 0b10000000000000000000000000000000;
s21_negate(value, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_negate_2
// -79,228,162,514,264,337,593,543,950,335 -> 79,228,162,514,264,337,593,543,950,335

s21_decimal value;
    value.bits[0] = 0b11111111111111111111111111111111;
    value.bits[1] = 0b11111111111111111111111111111111;
    value.bits[2] = 0b11111111111111111111111111111111;
    value.bits[3] = 0b10000000000000000000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b11111111111111111111111111111111;
    answer.bits[1] = 0b11111111111111111111111111111111;
    answer.bits[2] = 0b11111111111111111111111111111111;
    answer.bits[3] = 0b00000000000000000000000000000000;
s21_negate(value, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_negate_3
// 79,228,162,514,264,337,593,543,950,335 -> -79,228,162,514,264,337,593,543,950,335 (scale 2)

s21_decimal value;
    value.bits[0] = 0b11111111111111111111111111111111;
    value.bits[1] = 0b11111111111111111111111111111111;
    value.bits[2] = 0b11111111111111111111111111111111;
    value.bits[3] = 0b00000000000000100000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b11111111111111111111111111111111;
    answer.bits[1] = 0b11111111111111111111111111111111;
    answer.bits[2] = 0b11111111111111111111111111111111;
    answer.bits[3] = 0b10000000000000100000000000000000;
s21_negate(value, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);

#test test_s21_negate_4
// -79,228,162,514,264,337,593,543,950,335 -> 79,228,162,514,264,337,593,543,950,335 (scale 2)

s21_decimal value;
    value.bits[0] = 0b11111111111111111111111111111111;
    value.bits[1] = 0b11111111111111111111111111111111;
    value.bits[2] = 0b11111111111111111111111111111111;
    value.bits[3] = 0b10000000000000100000000000000000;
s21_decimal result = {0};
s21_decimal answer;
    answer.bits[0] = 0b11111111111111111111111111111111;
    answer.bits[1] = 0b11111111111111111111111111111111;
    answer.bits[2] = 0b11111111111111111111111111111111;
    answer.bits[3] = 0b00000000000000100000000000000000;
s21_negate(value, &result);
ck_assert_int_eq(s21_is_equal(result, answer), 1);


#test test_s21_from_decimal_to_int_1
// -755.979 -> -755

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000010111000100100001011;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000110000000000000000;
int result;
int answer = -755;  
s21_from_decimal_to_int(value_1, &result);
ck_assert_int_eq(result, answer);

#test test_s21_from_decimal_to_int_2
// -2147483647 -> -2147483647 

s21_decimal value_1;
    value_1.bits[0] = 0b01111111111111111111111111111111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000000000000000000000;
int result;
int answer = -2147483647;  
s21_from_decimal_to_int(value_1, &result);
//print_int(result);
ck_assert_int_eq(result, answer);

#test test_s21_from_decimal_to_int_3
// 2147483647 -> 2147483647 

s21_decimal value_1;
    value_1.bits[0] = 0b01111111111111111111111111111111;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b00000000000000000000000000000000;
int result;
int answer = 2147483647;  
s21_from_decimal_to_int(value_1, &result);
//print_int(result);
ck_assert_int_eq(result, answer);

#test test_s21_is_equal_2

s21_decimal value_1;
    value_1.bits[0] = 0b00000000000000000000000000000000;
    value_1.bits[1] = 0b00000000000000000000000000000000;
    value_1.bits[2] = 0b00000000000000000000000000000000;
    value_1.bits[3] = 0b10000000000000110000000000000000; 
s21_decimal value_2;
    value_2.bits[0] = 0b00000000000000000000000000000000;
    value_2.bits[1] = 0b00000000000000000000000000000000;
    value_2.bits[2] = 0b00000000000000000000000000000000;
    value_2.bits[3] = 0b00000000000001110000000000000000; 

ck_assert_int_eq(s21_is_equal(value_1, value_2), 1);
ck_assert_int_eq(s21_is_equal(value_1, value_1), 1);
ck_assert_int_eq(s21_is_equal(value_2, value_2), 1);
ck_assert_int_eq(s21_is_equal(value_2, value_1), 1);

#test test_s21_is_greater_1
// 0 0

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000000;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000000;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_2
// -2 0

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000010;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000000;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_3
// 2 -4

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000010;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_4
//-6 -4

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_5
// 0.06 6

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000110;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_6
// 6 0.06

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000110;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_7
// 14 6

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000001110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000110;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_8
//-14 6

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000001110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000110;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_9
//-6 -0.06

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000110;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_10
//-4 -6

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000110;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_11
//-6 -4

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_12
// 5 7

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000101;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000111;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_13
// 7 5

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000111;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000101;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_14
//-3 4

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_15
//-4 3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_16
// 3 -4

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_17
// 4 -3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_18
//-3 -3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_19
// 3 3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_20
//-0.04 -6

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000110;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_21
//-0.06 -4

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_22
// 0.05 7

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000101;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000111;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_23
// 0.07 5

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000111;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000101;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_24
//-0.03 4

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_25
//-0.04 3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_26
// 0.03 -4

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_27
// 0.04 -3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_28
//-0.03 -3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_29
// 0.03 3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_30
//-3 3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_31
// 3 -3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_32
//-4 -0.06

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000110;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_33
//-6 -0.04

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000110;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_34
// 5 0.07

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000101;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000111;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_35
// 7 0.05

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000111;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000101;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_36
//-3 0.04

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_37
//-4 0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_38
// 3 -0.04

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000100;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_39
// 4 -0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000100;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_40
//-3 -0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_41
// 3 0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_greater_42
//-0 0.00

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000000;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000000;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_43
// 0 -0

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000000;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000000;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b10000000000000000000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_44
// 0.5 0.50

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000101;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000110010;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_is_big_greater_01
// 0.5 0.50

s21_big_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000101;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
value_1.bits[4] = 0b00000000000000000000000000000000;
value_1.bits[5] = 0b00000000000000000000000000000000;
value_1.bits[6] = 0b00000000000000000000000000000000;
value_1.bits[7] = 0b00000000000000010000000000000000;
s21_big_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000110010;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;
value_2.bits[4] = 0b00000000000000000000000000000000;
value_2.bits[5] = 0b00000000000000000000000000000000;
value_2.bits[6] = 0b00000000000000000000000000000000;
value_2.bits[7] = 0b00000000000000100000000000000000;

int result = is_big_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_is_big_greater_02
// 0.0 -0.0

s21_big_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000000;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
value_1.bits[4] = 0b00000000000000000000000000000000;
value_1.bits[5] = 0b00000000000000000000000000000000;
value_1.bits[6] = 0b00000000000000000000000000000000;
value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000000;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;
value_2.bits[4] = 0b00000000000000000000000000000000;
value_2.bits[5] = 0b00000000000000000000000000000000;
value_2.bits[6] = 0b00000000000000000000000000000000;
value_2.bits[7] = 0b10000000000000000000000000000000;

int result = is_big_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_is_big_greater_03
// 1 2

s21_big_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000001;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
value_1.bits[4] = 0b00000000000000000000000000000000;
value_1.bits[5] = 0b00000000000000000000000000000000;
value_1.bits[6] = 0b00000000000000000000000000000000;
value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000010;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;
value_2.bits[4] = 0b00000000000000000000000000000000;
value_2.bits[5] = 0b00000000000000000000000000000000;
value_2.bits[6] = 0b00000000000000000000000000000000;
value_2.bits[7] = 0b00000000000000000000000000000000;

int result = is_big_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_is_big_greater_04
// 1 -2

s21_big_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000001;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
value_1.bits[4] = 0b00000000000000000000000000000000;
value_1.bits[5] = 0b00000000000000000000000000000000;
value_1.bits[6] = 0b00000000000000000000000000000000;
value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000010;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;
value_2.bits[4] = 0b00000000000000000000000000000000;
value_2.bits[5] = 0b00000000000000000000000000000000;
value_2.bits[6] = 0b00000000000000000000000000000000;
value_2.bits[7] = 0b10000000000000000000000000000000;

int result = is_big_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_is_big_greater_05
// 3 0.2

s21_big_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
value_1.bits[4] = 0b00000000000000000000000000000000;
value_1.bits[5] = 0b00000000000000000000000000000000;
value_1.bits[6] = 0b00000000000000000000000000000000;
value_1.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000010;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;
value_2.bits[4] = 0b00000000000000000000000000000000;
value_2.bits[5] = 0b00000000000000000000000000000000;
value_2.bits[6] = 0b00000000000000000000000000000000;
value_2.bits[7] = 0b00000000000000010000000000000000;

int result = is_big_greater(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_is_big_greater_06
// -3 -2

s21_big_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
value_1.bits[4] = 0b00000000000000000000000000000000;
value_1.bits[5] = 0b00000000000000000000000000000000;
value_1.bits[6] = 0b00000000000000000000000000000000;
value_1.bits[7] = 0b10000000000000000000000000000000;
s21_big_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000010;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;
value_2.bits[4] = 0b00000000000000000000000000000000;
value_2.bits[5] = 0b00000000000000000000000000000000;
value_2.bits[6] = 0b00000000000000000000000000000000;
value_2.bits[7] = 0b10000000000000000000000000000000;

int result = is_big_greater(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_or_equal_1
// 0.003 0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000110000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater_or_equal(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_greater_or_equal_2
// 0.03 0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_greater_or_equal(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_less_1
// 3 0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_less(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_less_2
// 0.03 0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_less(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_less_3
// 0.03 3

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000000000000000000000;

int result = s21_is_less(value_1, value_2);
ck_assert_int_eq(result, 1);

#test test_s21_is_less_or_equal_1
// 3 0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000000000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_less_or_equal(value_1, value_2);
ck_assert_int_eq(result, 0);

#test test_s21_is_less_or_equal_2
// 0.03 0.03

s21_decimal value_1;
value_1.bits[0] = 0b00000000000000000000000000000011;
value_1.bits[1] = 0b00000000000000000000000000000000;
value_1.bits[2] = 0b00000000000000000000000000000000;
value_1.bits[3] = 0b00000000000000100000000000000000;
s21_decimal value_2;
value_2.bits[0] = 0b00000000000000000000000000000011;
value_2.bits[1] = 0b00000000000000000000000000000000;
value_2.bits[2] = 0b00000000000000000000000000000000;
value_2.bits[3] = 0b00000000000000100000000000000000;

int result = s21_is_less_or_equal(value_1, value_2);
ck_assert_int_eq(result, 1);



#test test2_s21_is_less

  s21_decimal first = {{4412, 5675, 1254, 0b00000000000000000000000000000000}};
  s21_decimal second = {{4412, 5675, 1254, 0b10000000000000000000000000000000}};
  ck_assert_int_eq(s21_is_less(first, second), 0);

#test test3_s21_is_less

  s21_decimal first = {{0, 0, 0, 0b00000000000000000000000000000000}};
  s21_decimal second = {{0, 0, 0, 0b10000000000000000000000000000000}};
  ck_assert_int_eq(s21_is_less(first, second), 0);

#test test4_s21_is_less

  s21_decimal first = {{0, 0, 0, 0b10000000000000000000000000000000}};
  s21_decimal second = {{0, 0, 0, 0b00000000000000000000000000000000}};
  ck_assert_int_eq(s21_is_less(first, second), 0);

#test test5_s21_is_less

  s21_decimal first =  {{4412, 5675, 1254, 0b00000011000000000000000000000000}};
  s21_decimal second = {{4412, 5675, 1254, 0b00000101000000000000000000000000}};
 // print_decimal(first);
 // print_decimal(second);
  ck_assert_int_eq(s21_is_less(first, second), 0);
  
#test test6_s21_is_less  

  s21_decimal first = {{1000, 0, 0,  0b0000000000000101000000000000000}};
  s21_decimal second = {{100, 0, 0,0b0000000000000101000000000000000}};
  ck_assert_int_eq(s21_is_less(first, second), 0);
  
#test test7_s21_is_less  

  s21_decimal first = {{4422, 5515, 9254, 0b10000000000000110000000000000000}};
  s21_decimal second = {{6312, 5616, 1844, 0b10000000000001010000000000000000}};
  ck_assert_int_eq(s21_is_less(first, second), 1);


#test test_dec_is_equal
s21_decimal a = {0};
s21_decimal b = {0};

  a.bits[0] = 0b00000000000000000000000000000001;
  a.bits[1] = 0b00000000000000000000000000000000;
  a.bits[2] = 0b00000000000000000000000000000010;
  a.bits[3] = 0b00000000000000000000000000000000;

  b.bits[0] = 0b00000000000000000000000000000001;
  b.bits[1] = 0b00000000000000000000000000000000;
  b.bits[2] = 0b00000000000000000000000000000100;
  b.bits[3] = 0b00000000000000000000000000000000;


int is_not_equal = 0;


ck_assert_int_eq(s21_is_equal(a, b), is_not_equal );



#test test_s21_is_equal


s21_decimal temp;
    temp.bits[0] = 0b11000000000000000000000000000000;
    temp.bits[1] = 0b00000000000000000000000000000000;
    temp.bits[2] = 0b00000000000000000000000000000000;
    temp.bits[3] = 0b10000000000011010000000000000000;

   s21_decimal temp2;
    temp2.bits[0] = 0b10000000000000000000000000000000;
    temp2.bits[1] = 0b00000000000000000000000000000000;
    temp2.bits[2] = 0b00000000000000000000000000000000;
    temp2.bits[3] = 0b00000011000011010000000000000000;

    s21_decimal temp3;
    temp3.bits[0] = 0b11000000000000000000000000000000;
    temp3.bits[1] = 0b00000000000000000000000000000000;
    temp3.bits[2] = 0b00000000000000000000000000000000;
    temp3.bits[3] = 0b10000000000011010000000000000000;

    s21_decimal temp4;
    temp4.bits[0] = 0b11000000000000000000000000000000;
    temp4.bits[1] = 0b00000000000000000000000000000000;
    temp4.bits[2] = 0b00000000000000000000000000000000;
    temp4.bits[3] = 0b10000000000011010000000000000000;

int answer1 = 0;
int answer2 = 1;

ck_assert_int_eq(s21_is_equal(temp, temp2), answer1);
ck_assert_int_eq(s21_is_equal(temp3, temp4), answer2);


#test test_big_s21_is_equal

 s21_big_decimal temp;
    temp.bits[0] = 0b00000000000000000000000000000001;
    temp.bits[1] = 0b00000000000000000000000000000000;
    temp.bits[2] = 0b00000000000000000000000000000000;
    temp.bits[3] = 0b00000000000000000000000000000000;
    temp.bits[4] = 0b00000000000000000000000000000000;
    temp.bits[5] = 0b00000000000000000000000000000000;
    temp.bits[6] = 0b00000000000000000000000000000000;
    temp.bits[7] = 0b00000000000000010000000000000000;
    
    s21_big_decimal temp2;
    temp2.bits[0] = 0b00000000000000000000000000000001;
    temp2.bits[1] = 0b00000000000000000000000000000000;
    temp2.bits[2] = 0b00000000000000000000000000000000;
    temp2.bits[3] = 0b00000000000000000000000000000000;
    temp2.bits[4] = 0b00000000000000000000000000000000;
    temp2.bits[5] = 0b00000000000000000000000000000000;
    temp2.bits[6] = 0b00000000000000000000000000000000;
    temp2.bits[7] = 0b00000000000000110000000000000000;

     s21_big_decimal temp3;
    temp3.bits[0] = 0b00000000000000000000000000000001;
    temp3.bits[1] = 0b00000000000000000000000000000000;
    temp3.bits[2] = 0b00000000000000000000000000000000;
    temp3.bits[3] = 0b00000000000000000000000000000000;
    temp3.bits[4] = 0b00000000000000000000000000000000;
    temp3.bits[5] = 0b00000000000000000000000000000000;
    temp3.bits[6] = 0b00000000000000000000000000000000;
    temp3.bits[7] = 0b00000000000000010000000000000000;

     s21_big_decimal temp4;
    temp4.bits[1] = 0b00000000000000000000000000000000;
    temp4.bits[0] = 0b00000000000000000000000000000001;
    temp4.bits[2] = 0b00000000000000000000000000000000;
    temp4.bits[3] = 0b00000000000000000000000000000000;
    temp4.bits[4] = 0b00000000000000000000000000000000;
    temp4.bits[5] = 0b00000000000000000000000000000000;
    temp4.bits[6] = 0b00000000000000000000000000000000;
    temp4.bits[7] = 0b00000000000000010000000000000000;

    int answer1 = 0;
    int answer2 = 1;

    ck_assert_int_eq(is_big_equal(temp, temp2), answer1);
    ck_assert_int_eq(is_big_equal(temp3, temp4), answer2);

    #test test_greater_than1

 s21_decimal temp3;
    temp3.bits[0] = 0b11000000000000000000000000000000;
    temp3.bits[1] = 0b00000000000000000000000000000000;
    temp3.bits[2] = 0b00000000000000000000000000000000;
    temp3.bits[3] = 0b10000000000011010000000000000000;

    s21_decimal temp4;
    temp4.bits[0] = 0b11000000000000000000000000000000;
    temp4.bits[1] = 0b00000000000000000000000000000000;
    temp4.bits[2] = 0b00000000000000000000000000000000;
    temp4.bits[3] = 0b00000000000011010000000000000000;

    int greater = 1;
    int not_greater = 0;

ck_assert_int_eq(s21_is_greater(temp3, temp4), not_greater);
ck_assert_int_eq(s21_is_greater(temp4, temp3), greater);

#test test_greater_than2

 s21_decimal temp3;
    temp3.bits[0] = 0b11000000000000000000000000000000;
    temp3.bits[1] = 0b00000000000000000000000000000000;
    temp3.bits[2] = 0b00000000000000000000000000000000;
    temp3.bits[3] = 0b00000000000011010000000000000000;

    s21_decimal temp4;
    temp4.bits[0] = 0b11000000000000000000000000000000;
    temp4.bits[1] = 0b10000000000000000000000000000000;
    temp4.bits[2] = 0b00000000000000000000000000000000;
    temp4.bits[3] = 0b00000000000011000000000000000000;

    int greater = 1;
    int not_greater = 0;

ck_assert_int_eq(s21_is_greater(temp3, temp4), not_greater);
ck_assert_int_eq(s21_is_greater(temp4, temp3), greater);

#test test_greater_than3

 s21_decimal temp3;
    temp3.bits[0] = 0b11000000000000000000000000000000;
    temp3.bits[1] = 0b00000000000000000000000000000000;
    temp3.bits[2] = 0b00000000000000000000000000000000;
    temp3.bits[3] = 0b10000000000011000000000000000000;

    s21_decimal temp4;
    temp4.bits[0] = 0b11000000000000000000000000000000;
    temp4.bits[1] = 0b00000000000000000000000000000000;
    temp4.bits[2] = 0b00000000000000000000000000000000;
    temp4.bits[3] = 0b10000000000011010000000000000000;

    int greater = 1;
    int not_greater = 0;

ck_assert_int_eq(s21_is_greater(temp4, temp3), greater);
ck_assert_int_eq(s21_is_greater(temp3, temp4), not_greater);

#test test_div_10_big_2
// 18446744073709551615 -> 1844674407370955161
                                                   
s21_big_decimal value;
    value.bits[0] = 0b11111111111111111111111111111111;
    value.bits[1] = 0b11111111111111111111111111111111;
    value.bits[2] = 0b00000000000000000000000000000000;
    value.bits[3] = 0b00000000000000000000000000000000;
    value.bits[4] = 0b00000000000000000000000000000000;
    value.bits[5] = 0b00000000000000000000000000000000;
    value.bits[6] = 0b00000000000000000000000000000000;
    value.bits[7] = 0b00000000000000000000000000000000;
s21_big_decimal result = {0};
s21_big_decimal answer;
    answer.bits[0] = 0b10011001100110011001100110011001;
    answer.bits[1] = 0b00011001100110011001100110011001;
    answer.bits[2] = 0b00000000000000000000000000000000;
    answer.bits[3] = 0b00000000000000000000000000000000;
    answer.bits[4] = 0b00000000000000000000000000000000;
    answer.bits[5] = 0b00000000000000000000000000000000;
    answer.bits[6] = 0b00000000000000000000000000000000;
    answer.bits[7] = 0b00000000000000000000000000000000;
div_10_big(value, &result);
//print_big_decimal(result);
ck_assert_int_eq(is_big_equal(result, answer), 1);


